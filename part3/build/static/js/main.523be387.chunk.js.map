{"version":3,"sources":["Components/Filter.jsx","Components/PersonForm.jsx","Components/backend.js","Components/Persons.jsx","Components/Notifications.jsx","App.js","serviceWorker.js","index.js"],"names":["Filter","handleFilterChange","type","name","id","onChange","PersonForm","handleNameChange","handleNumberChange","handleClick","onClick","url","data","axios","post","then","res","get","delete","put","Persons","persons","filter","length","toLowerCase","includes","map","number","key","window","confirm","Server","Notifications","message","className","App","useEffect","setPersons","useState","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","messageClassName","event","value","target","preventDefault","duplicatePersons","person","personToUpdate","newPerson","setTimeout","alert","e","console","log","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.523be387.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = ({handleFilterChange}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\tfilter shown with\r\n\t\t\t<input type=\"text\" name=\"filter\" id=\"filter\" onChange={handleFilterChange}/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst PersonForm = ({handleNameChange,handleNumberChange,handleClick}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form>\r\n\t\t\t\t<div>\r\n\t\t\t\t\tname: <input onChange={handleNameChange}/>\r\n\t\t\t\t\tnumber: <input onChange={handleNumberChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button type=\"submit\" onClick={handleClick}>add</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default PersonForm;","import axios from 'axios';\r\n\r\nconst url = \"http://localhost:3001/api/persons\";\r\nconst addPhoneNumber =  (data) => {\r\n\treturn axios.post(`${url}`,data).then(res => res.data);\r\n};\r\n\r\nconst update = (data) => {\r\n\treturn axios.put(`${url}/${data.id}`,data).then((res) => res.data);\r\n};\r\n\r\nconst getAllPhone =  () => {\r\n\treturn axios.get(\"http://localhost:3001/api/persons\").then(\r\n\t\t(res) => {\r\n\t\t\treturn res.data;\r\n\t\t}\r\n\t)\r\n};\r\n\r\nconst deleteOne = (id) => {\r\n\treturn axios.delete(`http://localhost:3001/api/persons/${id}`).then(res => res.data)\r\n};\r\n\r\nexport default {addPhoneNumber,getAllPhone,deleteOne,update};","import React from 'react';\r\nimport Server from './backend'\r\nconst Persons = ({persons,filter}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\t(persons.length > 0) ? (\r\n\t\t\t\t\t\tpersons.filter(({name}) => name.toLowerCase().includes(filter)).map(\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t{name,number,id}\r\n\t\t\t\t\t\t\t) =>\r\n\t\t\t\t\t\t\t\t<div key={name}>\r\n\t\t\t\t\t\t\t\t\t{name} {number}\r\n\t\t\t\t\t\t\t\t\t<button onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tif (window.confirm(`delete ${name} ?`)) {\r\n\t\t\t\t\t\t\t\t\t\t\tServer.deleteOne(id)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\tdelete\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t) :\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\t<div>loading or no person!</div>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Persons;","import React from 'react';\r\nimport \"./css/Notifications.scss\";\r\n\r\nconst Notifications = ({message,className}) => {\r\n\treturn (message.length) ? <div className={`message ${className}`}>\r\n\t\t{message}\r\n\t</div> : null\r\n};\r\n\r\nexport default Notifications;","import React, {useEffect, useState} from 'react'\nimport Filter from \"./Components/Filter\";\nimport PersonForm from \"./Components/PersonForm\";\nimport Server from \"./Components/backend\";\nimport Persons from \"./Components/Persons\";\nimport Notifications from \"./Components/Notifications\";\n\n\n\nconst App = () => {\n  const effectHook =  () => {\n    Server.getAllPhone().then(res => {\n      setPersons(res)\n    });\n  };\n  \n  useEffect(effectHook,[]);\n  \n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  \n  \n  const handleNameChange = (event) => {\n    const {value} = event.target;\n    setNewName(value.toLowerCase());\n  };\n  \n  const handleNumberChange = (event) => {\n    const {value} = event.target;\n    setNewNumber(value);\n  };\n  \n  const handleFilterChange = (event) => {\n    const {value} = event.target;\n    setFilter(value);\n  };\n  \n  \n  let messageClassName = \"\";\n  \n  const handleClick = (event) => {\n    event.preventDefault();\n    const duplicatePersons = persons.filter(\n      (person) => {\n        return person.name === newName;\n      }\n    );\n    \n    if(duplicatePersons.length) {\n      const personToUpdate = duplicatePersons[0];\n      const replace = window.confirm(`replace ${personToUpdate.name} with new number?`);\n      if (replace) {\n        try {\n          personToUpdate.number = newNumber;\n          Server.update(personToUpdate).then((newPerson) => {\n            setPersons(persons.map((person) => {\n                if (person.id === newPerson.id) {\n                  return newPerson;\n                }else {\n                  return person;\n                }\n              }\n            ))\n          });\n          \n          setMessage(`has replaced ${personToUpdate.name}'s number with ${newNumber}`);\n          setTimeout(() => {\n            setMessage(\"\");\n          },5000);\n          \n          messageClassName = \"\";\n          alert(\"replaced!\")\n        }catch (e) {\n          messageClassName = \"error\";\n          \n          setMessage(`error message: ${e.message} !`);\n          setTimeout(() => {\n            setMessage(\"\")\n          },5000)\n          \n        }\n        \n      }\n    }\n    else {\n      const newPerson = {\n        name:newName,\n        number:newNumber\n      };\n      try {\n        setPersons([...persons,newPerson]);\n        Server.addPhoneNumber(newPerson);\n        messageClassName = \"\";\n        \n        setMessage(`added new Person ${newPerson.name}`);\n        setTimeout(() => {\n          setMessage(\"\");\n        },5000);\n        \n      }catch (e) {\n        messageClassName = \"error\";\n        console.log(e.message)\n      }\n    }\n    \n    \n  };\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      \n      <Notifications message={message} className={messageClassName}/>\n      \n      <Filter handleFilterChange={handleFilterChange}/>\n      \n      <h3>add a new</h3>\n      \n      <PersonForm\n        handleClick={handleClick}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      \n      <h2>Numbers</h2>\n      \n      <Persons persons={persons} filter={filter}/>\n    </div>\n  )\n};\nexport default App;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}